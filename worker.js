/**
 * worker.js ‚Äî Telegram-–±–æ—Ç –¥–ª—è Cloudflare Workers –±–µ–∑ export‚Äô–æ–≤.
 * –§–æ—Ä–º–∞—Ç Google-Sheets:  A:trigger | B:response
 * –°—Ç—Ä–æ–∫ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º trigger –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äì –±–æ—Ç –≤—ã–±–µ—Ä–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç.
 */

/** ----- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----- */
/** 
 * –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ Dashboard: 
 * –≤ wrangler.toml main —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "src/worker.js", 
 * –Ω–æ –≤ Dashboard –≤—ã –ø—Ä–∞–≤–∏—Ç–µ –ö–æ–¥ –Ω–∞–ø—Ä—è–º—É—é.
 * KV-namespace –∏ —Å–µ–∫—Ä–µ—Ç—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã —á–µ—Ä–µ–∑ UI.
 */

/** ----- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----- */
const SHEET_RANGE = encodeURIComponent('–õ–∏—Å—Ç1');   // –ò–º—è –ª–∏—Å—Ç–∞ –≤ Google Sheets
const RAM_TTL = 5 * 60 * 1000;                      // 5 –º–∏–Ω—É—Ç –≤ –º—Å
let ramCache = null;                                // –ì–ª–æ–±–∞–ª—å–Ω—ã–π RAM-–∫—ç—à

/**
 * –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
 * @param {Array<any>} arr 
 * @returns {any}
 */
function pickRandom(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/**
 * –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö –≤ RAM –∏ –≤ KV.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>.
 * @param {{ TELEGRAM_BOT_TOKEN: string, GOOGLE_SHEETS_API_KEY: string, GOOGLE_SHEETS_ID: string, SHEET_KV: KVNamespace }} env
 */
async function fetchSheet(env) {
  // 1) RAM-—Å–ª–æ–π
  if (ramCache && Date.now() < ramCache.exp) {
    return ramCache.data;
  }

  const kvKey = 'sheet-v1';

  // 2) KV-—Å–ª–æ–π
  const kvRaw = await env.SHEET_KV.get(kvKey, { type: 'json' });
  if (kvRaw) {
    // kvRaw ‚Äî —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–∞—Ä [[trigger, [–æ—Ç–≤–µ—Ç—ã]]]
    const map = new Map(kvRaw);
    ramCache = { data: map, exp: Date.now() + RAM_TTL };
    return map;
  }

  // 3) –ó–∞–ø—Ä–æ—Å –∫ Google Sheets API
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${env.GOOGLE_SHEETS_ID}/values/${SHEET_RANGE}?key=${env.GOOGLE_SHEETS_API_KEY}`;
  const res = await fetch(url);
  if (!res.ok) {
    console.error(`Sheets API error: ${res.status}`);
    throw new Error(`Sheets API ${res.status}`);
  }

  const json = await res.json(); // { values: [ [trigger, response], ... ] }
  const values = json.values || [];

  // 4) –°—Ç—Ä–æ–∏–º Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>
  const map = new Map();
  for (const row of values) {
    const triggerRaw = row[0] || '';
    const responseText = row[1] || '';
    const trigger = triggerRaw.trim().toLowerCase();
    if (!trigger || !responseText) continue;
    if (!map.has(trigger)) {
      map.set(trigger, []);
    }
    map.get(trigger).push(responseText);
  }

  // 5) –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏ –ø—É—à–∏–º –≤ KV (TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  const serialised = Array.from(map.entries()); // [ [trigger, [–æ—Ç–≤–µ—Ç—ã]], ... ]
  await env.SHEET_KV.put(kvKey, JSON.stringify(serialised), { expirationTtl: RAM_TTL / 1000 });

  // 6) –û–±–Ω–æ–≤–ª—è–µ–º RAM
  ramCache = { data: map, exp: Date.now() + RAM_TTL };
  console.log(`Sheet refreshed: ${map.size} triggers`);
  return map;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {{ TELEGRAM_BOT_TOKEN: string }} env 
 * @param {number} chatId 
 * @param {string} text 
 * @param {number=} replyTo 
 */
async function sendTelegram(env, chatId, text, replyTo) {
  const url = `https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage`;
  const body = {
    chat_id: chatId,
    text: text,
  };
  if (replyTo) {
    body.reply_to_message_id = replyTo;
  }
  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  });
}

// --------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP (Webhook) ---------------
addEventListener('fetch', (event) => {
  event.respondWith(handleRequest(event.request, event));
});

/**
 * @param {Request} request 
 * @param {{ env: any }} event
 * @returns {Promise<Response>}
 */
async function handleRequest(request, event) {
  // 1) Health-check: –µ—Å–ª–∏ GET, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º ¬´alive¬ª
  if (request.method === 'GET') {
    return new Response('üêà‚Äç‚¨õ CatBot online', { status: 200 });
  }

  // 2) POST –æ—Ç Telegram
  try {
    const upd = await request.json();
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!upd.message || !upd.message.text) {
      return new Response(JSON.stringify({ ok: true }), {
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const chatId = upd.message.chat.id;
    const textIn = (upd.message.text || '').trim();
    const textKey = textIn.toLowerCase();

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞
    if (textKey === '/reload') {
      await event.env.SHEET_KV.delete('sheet-v1');
      ramCache = null;
      await fetchSheet(event.env); // —Å—Ä–∞–∑—É –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à
      await sendTelegram(event.env, chatId, '–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ');
      return new Response(JSON.stringify({ ok: true }), {
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>
    const map = await fetchSheet(event.env);
    const answers = map.get(textKey);
    if (answers && answers.length > 0) {
      // –ë—Ä–æ—Å–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
      const randomAnswer = pickRandom(answers);
      await sendTelegram(event.env, chatId, randomAnswer, upd.message.message_id);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
      await sendTelegram(
        event.env,
        chatId,
        '–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ üôÄ –ù–∞–ø–∏—à–∏—Ç–µ /reload, –µ—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –µ–≥–æ.'
      );
    }
  } catch (err) {
    console.error('Handler error:', err);
    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —á—Ç–æ–±—ã Telegram –Ω–µ ¬´–¥—É–º–∞–ª¬ª, —á—Ç–æ –º—ã —É–ø–∞–ª–∏
  }

  return new Response(JSON.stringify({ ok: true }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

// --------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ CRON (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é) ---------------
addEventListener('scheduled', (event) => {
  event.waitUntil(handleScheduled(event));
});

/**
 * @param {{ env: any }} event 
 */
async function handleScheduled(event) {
  try {
    // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏–∑ Google Sheets –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    await fetchSheet(event.env);
  } catch (err) {
    console.error('Scheduled refresh error:', err);
  }
}
