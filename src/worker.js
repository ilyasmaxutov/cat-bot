// worker.js ‚Äî Telegram-–±–æ—Ç –¥–ª—è Cloudflare Workers (Service Worker —Å–∏–Ω—Ç–∞–∫—Å–∏—Å).
// –ß–∏—Ç–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ Google Sheets (–∫–æ–ª–æ–Ω–∫–∞ B) –∏ –≤—ã–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç (–∫–æ–ª–æ–Ω–∫–∞ C),
// –ø—Ä–∏ —ç—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π mapping –∫–æ–º–∞–Ω–¥ ‚Üí –∫–ª—é—á —Ç–∞–±–ª–∏—Ü—ã.

const commandMap = {
  "/command1": "–º—è—É",
  "/command2": "–ø–µ—Å–µ–Ω–∫–∞",
  "/command3": "–æ–±–Ω–∏–º–∞—à–∫–∞",
  "/command4": "—Å–∫—É—á–Ω–æ",
  "/command5": "–º–∏—Å—Å–∏—è",
  "/command6": "–ø–æ–≥–æ–≤–æ—Ä–∏–º",
};

const RANGE = encodeURIComponent("Sheet1!A:C"); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏—Å—Ç –≤ Google Sheets –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´Sheet1¬ª.
const RAM_TTL = 5 * 60 * 1000;                    // 5 –º–∏–Ω—É—Ç –≤ –º—Å
let ramCache = null;                              // { data: Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>, exp: timestamp }

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞.
 * @param {Array<any>} arr
 * @returns {any}
 */
function pickRandom(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/**
 * –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets, –∫—ç—à–∏—Ä—É–µ—Ç –≤ RAM –∏ KV, 
 * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Map<trigger (lowercase), [–æ—Ç–≤–µ—Ç—ã]>.
 * @param {{ SHEET_KV: KVNamespace, GOOGLE_SHEETS_API_KEY: string, GOOGLE_SHEETS_ID: string }} env
 * @returns {Promise<Map<string, string[]>>}
 */
async function fetchSheet(env) {
  // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ KV:
  if (!env.SHEET_KV) {
    throw new Error("Binding 'SHEET_KV' is not defined. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ wrangler.toml –∏ Dashboard.");
  }

  // 2) –ï—Å–ª–∏ –≤ RAM-—Å–ª–æ–µ –µ—â—ë –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö:
  if (ramCache && Date.now() < ramCache.exp) {
    return ramCache.data;
  }

  const kvKey = "sheet-v1";
  let kvRaw;
  try {
    kvRaw = await env.SHEET_KV.get(kvKey, { type: "json" });
  } catch (e) {
    throw new Error("Error accessing KV: " + e.message);
  }

  // 3) –ï—Å–ª–∏ –≤ KV —É–∂–µ –µ—Å—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>, –¥–æ—Å—Ç–∞—ë–º –µ—ë
  if (kvRaw) {
    const map = new Map(kvRaw);
    ramCache = { data: map, exp: Date.now() + RAM_TTL };
    return map;
  }

  // 4) –ò–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Google Sheets –Ω–∞–ø—Ä—è–º—É—é
  if (!env.GOOGLE_SHEETS_ID || !env.GOOGLE_SHEETS_API_KEY) {
    throw new Error("Missing GOOGLE_SHEETS_ID –∏–ª–∏ GOOGLE_SHEETS_API_KEY");
  }
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${env.GOOGLE_SHEETS_ID}/values/${RANGE}?key=${env.GOOGLE_SHEETS_API_KEY}`;
  const res = await fetch(url);
  if (!res.ok) {
    throw new Error(`Sheets API returned HTTP ${res.status}`);
  }
  const json = await res.json();
  const values = Array.isArray(json.values) ? json.values : [];

  // 5) –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ Map<trigger, [–æ—Ç–≤–µ—Ç—ã]> (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, —Ç.–∫. —Ç–∞–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
  const map = new Map();
  for (let i = 1; i < values.length; i++) {
    const row = values[i];
    const rawTrigger = (row[1] || "").trim().toLowerCase(); // –∫–æ–ª–æ–Ω–∫–∞ B
    const rawResponse = (row[2] || "").trim();              // –∫–æ–ª–æ–Ω–∫–∞ C
    if (!rawTrigger || !rawResponse) continue;
    if (!map.has(rawTrigger)) {
      map.set(rawTrigger, []);
    }
    map.get(rawTrigger).push(rawResponse);
  }

  // 6) –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ KV (TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  const serialised = Array.from(map.entries());
  try {
    await env.SHEET_KV.put(kvKey, JSON.stringify(serialised), { expirationTtl: RAM_TTL / 1000 });
  } catch (e) {
    console.error("Error writing to KV:", e);
  }

  // 7) –û–±–Ω–æ–≤–ª—è–µ–º RAM-—Å–ª–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
  ramCache = { data: map, exp: Date.now() + RAM_TTL };
  return map;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-—á–∞—Ç.
 * @param {{ TELEGRAM_BOT_TOKEN: string }} env
 * @param {number} chatId
 * @param {string} text
 * @param {number=} replyTo
 */
async function sendTelegram(env, chatId, text, replyTo) {
  const token = env.TELEGRAM_BOT_TOKEN;
  if (!token) return; // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º.

  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  const body = { chat_id: chatId, text };
  if (replyTo) body.reply_to_message_id = replyTo;

  try {
    await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });
  } catch (e) {
    console.error("Error sending message to Telegram:", e);
  }
}

// ==================== –û—Å–Ω–æ–≤–Ω–æ–π HTTP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (Webhook) ====================
addEventListener("fetch", (event) => {
  event.respondWith(handleRequest(event.request, event));
});

/**
 * @param {Request} request
 * @param {{ env: any }} event
 * @returns {Promise<Response>}
 */
async function handleRequest(request, event) {
  // –ë—ã—Å—Ç—Ä—ã–π Health-check: GET ‚Üí –ø—Ä–æ—Å—Ç–æ ¬´CatBot online¬ª
  if (request.method === "GET") {
    return new Response("üêà‚Äç‚¨õ CatBot online", { status: 200 });
  }

  try {
    const update = await request.json().catch(() => null);
    if (!update || !update.message || !update.message.text) {
      // –ï—Å–ª–∏ –Ω–µ—Ç message.text, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Telegram –ø—É—Å—Ç–æ–π OK
      return new Response(JSON.stringify({ ok: true }), {
        headers: { "Content-Type": "application/json" },
      });
    }

    const chatId = update.message.chat.id;
    const rawText = (update.message.text || "").trim().toLowerCase();

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ¬´/¬ª, —Å–º–æ—Ç—Ä–∏–º –≤ commandMap, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –∫–∞–∫ –µ—Å—Ç—å:
    const key = rawText.startsWith("/") ? commandMap[rawText] || rawText : rawText;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´/reload¬ª –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ
    if (key === "/reload") {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º KV –∏ RAM, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
      try {
        await event.env.SHEET_KV.delete("sheet-v1");
      } catch {}
      ramCache = null;
      try {
        await fetchSheet(event.env);
        await sendTelegram(event.env, chatId, "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ");
      } catch (err) {
        console.error(err);
        await sendTelegram(event.env, chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã üòø");
      }
      return new Response(JSON.stringify({ ok: true }), {
        headers: { "Content-Type": "application/json" },
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º Map<trigger, [–æ—Ç–≤–µ—Ç—ã]> –∏–∑ –∫–µ—à–∞/KV/Google Sheets
    let map;
    try {
      map = await fetchSheet(event.env);
    } catch (err) {
      console.error(err);
      await sendTelegram(event.env, chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã üòø");
      return new Response(JSON.stringify({ ok: true }), {
        headers: { "Content-Type": "application/json" },
      });
    }

    // –ò—â–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á—É
    const answers = map.get(key);
    if (answers && answers.length > 0) {
      const randomAnswer = pickRandom(answers);
      await sendTelegram(event.env, chatId, randomAnswer, update.message.message_id);
    } else {
      await sendTelegram(
        event.env,
        chatId,
        "–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ üôÄ –ù–∞–ø–∏—à–∏—Ç–µ /reload, –µ—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä."
      );
    }
  } catch (err) {
    console.error("Handler error:", err);
  }

  // –í—Å–µ–≥–¥–∞ –æ—Ç—Å—ã–ª–∞–µ–º Telegram { ok: true }, —á—Ç–æ–±—ã webhook –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–∏
  return new Response(JSON.stringify({ ok: true }), {
    headers: { "Content-Type": "application/json" },
  });
}

// ==================== CRON-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ====================
addEventListener("scheduled", (event) => {
  event.waitUntil(handleScheduled(event));
});

/**
 * @param {{ env: any }} event
 */
async function handleScheduled(event) {
  // –ï—Å–ª–∏ KV-binding –≤–¥—Ä—É–≥ –Ω–µ –ø–æ–¥—Ü–µ–ø–∏–ª—Å—è (–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º), –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
  if (!event.env.SHEET_KV) return;
  try {
    await fetchSheet(event.env);
  } catch (err) {
    console.error("Scheduled refresh error:", err);
  }
}
