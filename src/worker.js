/**
 * worker.js ‚Äî Telegram-–±–æ—Ç –¥–ª—è Cloudflare Workers (Service Worker —Å–∏–Ω—Ç–∞–∫—Å–∏—Å).
 * –ß–∏—Ç–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ Google Sheets (–∫–æ–ª–æ–Ω–∫–∞ B) –∏ –≤—ã–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç (–∫–æ–ª–æ–Ω–∫–∞ C).
 * 
 * –ß—Ç–æ–±—ã —ç—Ç–æ—Ç –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª, —É–±–µ–¥–∏—Ç–µ—Å—å:
 * 1. –í wrangler.toml –ø—Ä–æ–ø–∏—Å–∞–Ω–æ:
 *    name = "catbot"
 *    compatibility_date = "2025-05-31"
 *    main = "src/worker.js"
 *
 *    [[kv_namespaces]]
 *    binding    = "SHEET_KV"
 *    id         = "<PROD_KV_ID>"
 *    preview_id = "<PREVIEW_KV_ID>"
 *
 *    [triggers]
 *    crons = ["*/5 * * * *"]
 *
 * 2. –í —Ä–∞–∑–¥–µ–ª–µ Variables and Secrets Dashboard (–∏–ª–∏ —á–µ—Ä–µ–∑ wrangler secret put) –µ—Å—Ç—å —Ç—Ä–∏ —Å–µ–∫—Ä–µ—Ç–∞:
 *    TELEGRAM_BOT_TOKEN, GOOGLE_SHEETS_API_KEY, GOOGLE_SHEETS_ID
 * 3. –¢–∞–±–ª–∏—Ü–∞ Google Sheets –¥–æ—Å—Ç—É–ø–Ω–∞ ¬´Anyone with the link ‚Üí Viewer¬ª.
 *    –í —Ç–∞–±–ª–∏—Ü–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç), 
 *    –∞ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏:
 *      –∫–æ–ª–æ–Ω–∫–∞ A ‚Äî (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è),
 *      –∫–æ–ª–æ–Ω–∫–∞ B ‚Äî —Ç—Ä–∏–≥–≥–µ—Ä (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ),
 *      –∫–æ–ª–æ–Ω–∫–∞ C ‚Äî –æ—Ç–≤–µ—Ç.
 * 4. URL –≤–µ–±—Ö—É–∫–∞ Telegram —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω (curl setWebhook ‚Ä¶) –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ—Ä–µ–Ω—å –≤–æ—Ä–∫–µ—Ä–∞.
 */

/** ----- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ RAM-–∫—ç—à ----- */
const RANGE = encodeURIComponent('Sheet1!A:C'); // –î–∏–∞–ø–∞–∑–æ–Ω: –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –ª–∏—Å—Ç–∞ "Sheet1"
const RAM_TTL = 5 * 60 * 1000;                   // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
let ramCache = null;                             // { data: Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>, exp: timestamp }

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞.
 * @param {Array<any>} arr 
 * @returns {any}
 */
function pickRandom(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/**
 * –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets, –∫—ç—à–∏—Ä—É–µ—Ç –≤ RAM –∏ KV, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>.
 * –¢—Ä–∏–≥–≥–µ—Ä –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ B (index 1), –æ—Ç–≤–µ—Ç ‚Äî –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ C (index 2).
 * @param {{ SHEET_KV: KVNamespace, GOOGLE_SHEETS_API_KEY: string, GOOGLE_SHEETS_ID: string }} env 
 * @returns {Promise<Map<string,string[]>>}
 */
async function fetchSheet(env) {
  // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º RAM-—Å–ª–æ–π
  if (ramCache && Date.now() < ramCache.exp) {
    return ramCache.data;
  }

  // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º KV-—Å–ª–æ–π (preview_id –¥–ª—è wrangler dev, id –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞)
  const kvKey = 'sheet-v1';
  const kvRaw = await env.SHEET_KV.get(kvKey, { type: 'json' });
  if (kvRaw) {
    // kvRaw ‚Äî —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–∞—Ä [[trigger, [–æ—Ç–≤–µ—Ç—ã]], ...]
    const map = new Map(kvRaw);
    ramCache = { data: map, exp: Date.now() + RAM_TTL };
    return map;
  }

  // 3) –ó–∞–ø—Ä–æ—Å –∫ Google Sheets API
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${env.GOOGLE_SHEETS_ID}` +
              `/values/${RANGE}?key=${env.GOOGLE_SHEETS_API_KEY}`;
  const res = await fetch(url);
  if (!res.ok) {
    console.error(`Sheets API error: ${res.status}`);
    throw new Error(`Sheets API returned HTTP ${res.status}`);
  }
  const json = await res.json(); // { values: [ [A, B, C], [A, B, C], ... ] }
  const values = Array.isArray(json.values) ? json.values : [];

  // 4) –§–æ—Ä–º–∏—Ä—É–µ–º Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>
  const map = new Map();
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
  for (let i = 1; i < values.length; i++) {
    const row = values[i];
    // row.length –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 3, –ø—Ä–æ–≤–µ—Ä—è–µ–º
    const rawTrigger = (row[1] || '').trim().toLowerCase();
    const rawResponse = (row[2] || '').trim();
    if (!rawTrigger || !rawResponse) continue;
    if (!map.has(rawTrigger)) {
      map.set(rawTrigger, []);
    }
    map.get(rawTrigger).push(rawResponse);
  }

  // 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ KV (TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  const serialised = Array.from(map.entries()); // [ [trigger, [–æ—Ç–≤–µ—Ç—ã]], ‚Ä¶ ]
  await env.SHEET_KV.put(kvKey, JSON.stringify(serialised), { expirationTtl: RAM_TTL / 1000 });

  // 6) –û–±–Ω–æ–≤–ª—è–µ–º RAM
  ramCache = { data: map, exp: Date.now() + RAM_TTL };
  console.log(`Sheet refreshed: ${map.size} distinct triggers`);
  return map;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-—á–∞—Ç.
 * @param {{ TELEGRAM_BOT_TOKEN: string }} env 
 * @param {number} chatId 
 * @param {string} text 
 * @param {number=} replyTo 
 */
async function sendTelegram(env, chatId, text, replyTo) {
  const url = `https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage`;
  const body = { chat_id: chatId, text };
  if (replyTo) body.reply_to_message_id = replyTo;
  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  });
}

// ----------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP (Webhook) -----------------
addEventListener('fetch', (event) => {
  event.respondWith(handleRequest(event.request, event));
});

/**
 * @param {Request} request 
 * @param {{ env: any }} event 
 * @returns {Promise<Response>}
 */
async function handleRequest(request, event) {
  // Health-check –Ω–∞ GET-–∑–∞–ø—Ä–æ—Å—ã
  if (request.method === 'GET') {
    return new Response('üêà‚Äç‚¨õ CatBot online', { status: 200 });
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST –æ—Ç Telegram
  try {
    const update = await request.json().catch(() => null);
    if (!update || !update.message || !update.message.text) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è message.text, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK
      return new Response(JSON.stringify({ ok: true }), {
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const chatId = update.message.chat.id;
    const textIn = (update.message.text || '').trim();
    const key = textIn.toLowerCase();

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
    if (key === '/reload') {
      await event.env.SHEET_KV.delete('sheet-v1');
      ramCache = null;
      try {
        await fetchSheet(event.env);
        await sendTelegram(event.env, chatId, '–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ');
      } catch (err) {
        console.error('Error reloading sheet:', err);
        await sendTelegram(event.env, chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã üòø');
      }
      return new Response(JSON.stringify({ ok: true }), {
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É —Ç—Ä–∏–≥–≥–µ—Ä‚Üí–º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤
    let map;
    try {
      map = await fetchSheet(event.env);
    } catch (err) {
      console.error('Error fetching sheet:', err);
      await sendTelegram(event.env, chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã üòø');
      return new Response(JSON.stringify({ ok: true }), {
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // –ò—â–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á—É
    const answers = map.get(key);
    if (answers && answers.length > 0) {
      const randomAnswer = pickRandom(answers);
      await sendTelegram(event.env, chatId, randomAnswer, update.message.message_id);
    } else {
      await sendTelegram(
        event.env,
        chatId,
        '–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ üôÄ –ù–∞–ø–∏—à–∏—Ç–µ /reload, –µ—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä.'
      );
    }
  } catch (err) {
    console.error('Handler error:', err);
  }

  // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK —Å {ok:true}, —á—Ç–æ–±—ã Telegram –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª webhook
  return new Response(JSON.stringify({ ok: true }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

// ----------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ CRON (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é) -----------------
addEventListener('scheduled', (event) => {
  event.waitUntil(handleScheduled(event));
});

/**
 * –ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç) –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –¥–∞–Ω–Ω—ã—Ö
 * @param {{ env: any }} event 
 */
async function handleScheduled(event) {
  try {
    await fetchSheet(event.env);
  } catch (err) {
    console.error('Scheduled refresh error:', err);
  }
}
