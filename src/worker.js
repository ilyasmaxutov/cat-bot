// worker.js ‚Äî Telegram-–±–æ—Ç –¥–ª—è Cloudflare Workers (Service Worker —Å–∏–Ω—Ç–∞–∫—Å–∏—Å).
// –ß–∏—Ç–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ Google Sheets (–∫–æ–ª–æ–Ω–∫–∞ B) –∏ –≤—ã–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç (–∫–æ–ª–æ–Ω–∫–∞ C),
// –ø—Ä–∏ —ç—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π mapping –∫–æ–º–∞–Ω–¥ ‚Üí –∫–ª—é—á —Ç–∞–±–ª–∏—Ü—ã.

const commandMap = {
  "/command1": "–º—è—É",
  "/command2": "–ø–µ—Å–µ–Ω–∫–∞",
  "/command3": "–æ–±–Ω–∏–º–∞—à–∫–∞",
  "/command4": "—Å–∫—É—á–Ω–æ",
  "/command5": "–º–∏—Å—Å–∏—è",
  "/command6": "–ø–æ–≥–æ–≤–æ—Ä–∏–º",
};

const RANGE = encodeURIComponent("Sheet1!A:C"); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏—Å—Ç –≤ Google Sheets –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´Sheet1¬ª.
const RAM_TTL = 5 * 60 * 1000;                    // 5 –º–∏–Ω—É—Ç –≤ –º—Å
let ramCache = null;                              // { data: Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>, exp: timestamp }

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞.
 * @param {Array<any>} arr
 * @returns {any}
 */
function pickRandom(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/**
 * –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets, –∫—ç—à–∏—Ä—É–µ—Ç –≤ RAM –∏ KV,
 * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Map<trigger (lowercase), [–æ—Ç–≤–µ—Ç—ã]>.
 * @param {{ SHEET_KV: KVNamespace, GOOGLE_SHEETS_API_KEY: string, GOOGLE_SHEETS_ID: string }} env
 * @returns {Promise<Map<string, string[]>>}
 */
async function fetchSheet(env) {
  // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å env –∏ –ø—Ä–∏–≤—è–∑–∫–∞ KV:
  if (!env || !env.SHEET_KV) { // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ env
    throw new Error("Binding 'SHEET_KV' is not defined in env. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ wrangler.toml –∏ Dashboard.");
  }

  // 2) –ï—Å–ª–∏ –≤ RAM-—Å–ª–æ–µ –µ—â—ë –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö:
  if (ramCache && Date.now() < ramCache.exp) {
    return ramCache.data;
  }

  const kvKey = "sheet-v1";
  let kvRaw;
  try {
    kvRaw = await env.SHEET_KV.get(kvKey, { type: "json" });
  } catch (e) {
    throw new Error("Error accessing KV: " + e.message);
  }

  // 3) –ï—Å–ª–∏ –≤ KV —É–∂–µ –µ—Å—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è Map<trigger, [–æ—Ç–≤–µ—Ç—ã]>, –¥–æ—Å—Ç–∞—ë–º –µ—ë
  if (kvRaw) {
    const map = new Map(kvRaw);
    ramCache = { data: map, exp: Date.now() + RAM_TTL };
    return map;
  }

  // 4) –ò–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Google Sheets –Ω–∞–ø—Ä—è–º—É—é
  if (!env.GOOGLE_SHEETS_ID || !env.GOOGLE_SHEETS_API_KEY) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º env
    throw new Error("Missing GOOGLE_SHEETS_ID –∏–ª–∏ GOOGLE_SHEETS_API_KEY in env");
  }
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${env.GOOGLE_SHEETS_ID}/values/${RANGE}?key=${env.GOOGLE_SHEETS_API_KEY}`;
  const res = await fetch(url);
  if (!res.ok) {
    // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç Google Sheets API
    const errorBody = await res.text();
    console.error("Sheets API Error Body:", errorBody);
    throw new Error(`Sheets API returned HTTP ${res.status}. Response: ${errorBody}`);
  }
  const json = await res.json();
  const values = Array.isArray(json.values) ? json.values : [];

  // 5) –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ Map<trigger, [–æ—Ç–≤–µ—Ç—ã]> (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, —Ç.–∫. —Ç–∞–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
  const map = new Map();
  for (let i = 1; i < values.length; i++) {
    const row = values[i];
    const rawTrigger = (row[1] || "").trim().toLowerCase(); // –∫–æ–ª–æ–Ω–∫–∞ B
    const rawResponse = (row[2] || "").trim();              // –∫–æ–ª–æ–Ω–∫–∞ C
    if (!rawTrigger || !rawResponse) continue;
    if (!map.has(rawTrigger)) {
      map.set(rawTrigger, []);
    }
    map.get(rawTrigger).push(rawResponse);
  }

  // 6) –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ KV (TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  const serialised = Array.from(map.entries());
  try {
    await env.SHEET_KV.put(kvKey, JSON.stringify(serialised), { expirationTtl: RAM_TTL / 1000 });
  } catch (e) {
    console.error("Error writing to KV:", e);
  }

  // 7) –û–±–Ω–æ–≤–ª—è–µ–º RAM-—Å–ª–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
  ramCache = { data: map, exp: Date.now() + RAM_TTL };
  return map;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-—á–∞—Ç.
 * @param {{ TELEGRAM_BOT_TOKEN: string }} env
 * @param {number} chatId
 * @param {string} text
 * @param {number=} replyTo
 */
async function sendTelegram(env, chatId, text, replyTo) {
  if (!env || !env.TELEGRAM_BOT_TOKEN) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º env
      console.error("TELEGRAM_BOT_TOKEN not found in env. Message not sent.");
      return;
  }
  const token = env.TELEGRAM_BOT_TOKEN;

  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  const body = { chat_id: chatId, text };
  if (replyTo) body.reply_to_message_id = replyTo;

  try {
    const response = await fetch(url, { // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Telegram API
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });
    if (!response.ok) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        const errorBody = await response.text();
        console.error(`Error sending message to Telegram: ${response.status} ${response.statusText}`, errorBody);
    }
  } catch (e) {
    console.error("Error sending message to Telegram (network or other):", e);
  }
}

// ==================== –û—Å–Ω–æ–≤–Ω–æ–π HTTP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (Webhook) ====================
addEventListener("fetch", (fetchEvent) => { // `fetchEvent` - —ç—Ç–æ FetchEvent
  // –í Service Worker –±–∞–π–Ω–¥–∏–Ω–≥–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
  // –°–æ–±–∏—Ä–∞–µ–º –∏—Ö –≤ –æ–±—ä–µ–∫—Ç `envForHandler` –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
  const envForHandler = {
    SHEET_KV: typeof SHEET_KV !== 'undefined' ? SHEET_KV : null,
    GOOGLE_SHEETS_API_KEY: typeof GOOGLE_SHEETS_API_KEY !== 'undefined' ? GOOGLE_SHEETS_API_KEY : null,
    GOOGLE_SHEETS_ID: typeof GOOGLE_SHEETS_ID !== 'undefined' ? GOOGLE_SHEETS_ID : null,
    TELEGRAM_BOT_TOKEN: typeof TELEGRAM_BOT_TOKEN !== 'undefined' ? TELEGRAM_BOT_TOKEN : null,
    // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –±–∞–π–Ω–¥–∏–Ω–≥–∏/—Å–µ–∫—Ä–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
  };

  // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∞–π–Ω–¥–∏–Ω–≥–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏–Ω–∞—á–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
  if (!envForHandler.SHEET_KV || !envForHandler.TELEGRAM_BOT_TOKEN || !envForHandler.GOOGLE_SHEETS_API_KEY || !envForHandler.GOOGLE_SHEETS_ID) {
    console.error("CRITICAL: One or more required bindings/secrets are undefined in the global scope for the fetch handler.",
                  "SHEET_KV defined:", !!envForHandler.SHEET_KV,
                  "TELEGRAM_BOT_TOKEN defined:", !!envForHandler.TELEGRAM_BOT_TOKEN,
                  "GOOGLE_SHEETS_API_KEY defined:", !!envForHandler.GOOGLE_SHEETS_API_KEY,
                  "GOOGLE_SHEETS_ID defined:", !!envForHandler.GOOGLE_SHEETS_ID);
    // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É, –Ω–æ Telegram –æ–∂–∏–¥–∞–µ—Ç 200 OK, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫–ª—é—á–∏—Ç—å webhook.
    // –õ—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å OK. –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç, –Ω–æ webhook –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.
  }

  fetchEvent.respondWith(handleRequest(fetchEvent.request, envForHandler)); // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π envForHandler
});

/**
 * @param {Request} request
 * @param {object} env - –û–±—ä–µ–∫—Ç —Å –±–∞–π–Ω–¥–∏–Ω–≥–∞–º–∏ –∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
 * @returns {Promise<Response>}
 */
async function handleRequest(request, env) { // –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å —è–≤–Ω–æ `env`
  // –ë—ã—Å—Ç—Ä—ã–π Health-check: GET ‚Üí –ø—Ä–æ—Å—Ç–æ ¬´CatBot online¬ª
  if (request.method === "GET") {
    return new Response("üêà‚Äç‚¨õ CatBot online", { status: 200 });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ env –≤–æ–æ–±—â–µ –ø–µ—Ä–µ–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç SHEET_KV
    if (!env || !env.SHEET_KV) {
        console.error("handleRequest: env object or env.SHEET_KV is missing!");
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ chatId
        try {
            const tempUpdate = await request.clone().json().catch(() => null);
            if (tempUpdate && tempUpdate.message && tempUpdate.message.chat && env && env.TELEGRAM_BOT_TOKEN) {
                await sendTelegram(env, tempUpdate.message.chat.id, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞ üòø –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
            }
        } catch (e) { /*ignore*/ }
        return new Response(JSON.stringify({ ok: true }), { headers: { "Content-Type": "application/json" }});
    }

    const update = await request.json().catch(() => null);
    if (!update || !update.message || !update.message.text) {
      return new Response(JSON.stringify({ ok: true }), {
        headers: { "Content-Type": "application/json" },
      });
    }

    const chatId = update.message.chat.id;
    const rawText = (update.message.text || "").trim().toLowerCase();
    const key = rawText.startsWith("/") ? commandMap[rawText] || rawText : rawText;

    if (key === "/reload") {
      try {
        await env.SHEET_KV.delete("sheet-v1"); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π env
      } catch(e) { console.error("Error deleting KV for /reload:", e); }
      ramCache = null;
      try {
        await fetchSheet(env); // –ü–µ—Ä–µ–¥–∞–µ–º env
        await sendTelegram(env, chatId, "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ"); // –ü–µ—Ä–µ–¥–∞–µ–º env
      } catch (err) {
        console.error("Error during /reload data fetch:", err);
        await sendTelegram(env, chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã üòø: ${err.message}`); // –ü–µ—Ä–µ–¥–∞–µ–º env
      }
      return new Response(JSON.stringify({ ok: true }), {
        headers: { "Content-Type": "application/json" },
      });
    }

    let map;
    try {
      map = await fetchSheet(env); // –ü–µ—Ä–µ–¥–∞–µ–º env
    } catch (err) {
      console.error("Error fetching sheet data in handleRequest:", err);
      await sendTelegram(env, chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã üòø: ${err.message}`); // –ü–µ—Ä–µ–¥–∞–µ–º env
      return new Response(JSON.stringify({ ok: true }), {
        headers: { "Content-Type": "application/json" },
      });
    }

    const answers = map.get(key);
    if (answers && answers.length > 0) {
      const randomAnswer = pickRandom(answers);
      await sendTelegram(env, chatId, randomAnswer, update.message.message_id); // –ü–µ—Ä–µ–¥–∞–µ–º env
    } else {
      await sendTelegram(
        env, // –ü–µ—Ä–µ–¥–∞–µ–º env
        chatId,
        "–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ üôÄ –ù–∞–ø–∏—à–∏—Ç–µ /reload, –µ—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä."
      );
    }
  } catch (err) {
    console.error("Handler error:", err);
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    try {
        const tempUpdate = await request.clone().json().catch(() => null);
        if (tempUpdate && tempUpdate.message && tempUpdate.message.chat && env && env.TELEGRAM_BOT_TOKEN) {
            await sendTelegram(env, tempUpdate.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞ üòø");
        }
    } catch(e) { /*ignore*/ }
  }

  return new Response(JSON.stringify({ ok: true }), {
    headers: { "Content-Type": "application/json" },
  });
}

// ==================== CRON-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ====================
addEventListener("scheduled", (scheduledEvent) => { // scheduledEvent - —ç—Ç–æ ScheduledEvent
  // –î–ª—è scheduledEvent, scheduledEvent.env –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–π–Ω–¥–∏–Ω–≥–∏
  scheduledEvent.waitUntil(handleScheduled(scheduledEvent));
});

/**
 * @param {ScheduledEvent & { env: any }} event  // –¢–∏–ø–∏–∑–∞—Ü–∏—è –∑–¥–µ—Å—å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, JavaScript –Ω–µ—Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω
 */
async function handleScheduled(event) {
  // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: —á—Ç–æ –≤–æ–æ–±—â–µ –µ—Å—Ç—å –≤ event –∏ event.env
  console.log("handleScheduled called. Event keys:", Object.keys(event).join(", "));
  if (event.env) {
    console.log("handleScheduled: event.env keys:", Object.keys(event.env).join(", "));
  } else {
    console.log("handleScheduled: event.env is undefined.");
  }

  // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  if (!event.env || !event.env.SHEET_KV) {
    console.error("Scheduled: event.env or event.env.SHEET_KV is missing!");
    return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç SHEET_KV
  }

  // –ü—Ä–æ–≤–µ—Ä–∏–º –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è fetchSheet –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ scheduled
  if (!event.env.GOOGLE_SHEETS_API_KEY || !event.env.GOOGLE_SHEETS_ID) {
      console.error("Scheduled: GOOGLE_SHEETS_API_KEY or GOOGLE_SHEETS_ID is missing in event.env!");
      // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏, –º–æ–∂–µ—Ç, —Ç–æ–∂–µ —Å—Ç–æ–∏—Ç return
  }


  try {
    console.log("Scheduled: Attempting to call fetchSheet with event.env:", event.env);
    await fetchSheet(event.env); // –ó–¥–µ—Å—å event.env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º —Å –±–∞–π–Ω–¥–∏–Ω–≥–∞–º–∏
    console.log("Scheduled: fetchSheet completed successfully.");
  } catch (err) {
    console.error("Scheduled refresh error:", err.message, err.stack);
  }
}
